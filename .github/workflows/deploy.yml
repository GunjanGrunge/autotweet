name: Deploy Lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:    # Added for manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'    # Updated to Node.js 18.x
          
      - name: Install dependencies
        run: npm install
        
      - name: Create deployment package
        run: |
          zip -r function.zip ./* -x '*.git*'
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
      - name: Deploy to Lambda and Setup CloudShell
        run: |
          # Verify environment variables before update
          echo "Verifying environment variables..."
          for var in TWITTER_API_KEY TWITTER_API_SECRET TWITTER_ACCESS_TOKEN TWITTER_ACCESS_SECRET OPENAI_API_KEY; do
            if [ -z "${!var}" ]; then
              echo "Error: $var is not set"
              exit 1
            fi
          done

          # Update function code
          aws lambda update-function-code \
            --function-name auto-tweet \
            --zip-file fileb://function.zip

          # Update function configuration with environment variables
          aws lambda update-function-configuration \
            --function-name auto-tweet \
            --environment "Variables={
              TWITTER_API_KEY='${{ secrets.TWITTER_API_KEY }}',
              TWITTER_API_SECRET='${{ secrets.TWITTER_API_SECRET }}',
              TWITTER_ACCESS_TOKEN='${{ secrets.TWITTER_ACCESS_TOKEN }}',
              TWITTER_ACCESS_SECRET='${{ secrets.TWITTER_ACCESS_SECRET }}',
              OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}'
            }"

          # Verify Lambda configuration
          echo "Verifying Lambda configuration..."
          aws lambda get-function-configuration \
            --function-name auto-tweet \
            --query 'Environment.Variables' \
            --output table

          # Add CloudShell setup
          echo "Setting up CloudShell trigger..."
          aws cloudshell upload-file \
            --path ./cloudshell-trigger.sh \
            --name cloudshell-trigger.sh \
            || echo "CloudShell upload attempted"

      - name: Create CloudWatch Event Rule
        run: |
          # Clean up existing rules and targets
          echo "Cleaning up existing rules..."
          
          # Remove existing AutoTweetSchedule rule if it exists
          aws events remove-targets --rule "AutoTweetSchedule" --ids "1" || true
          aws events delete-rule --name "AutoTweetSchedule" || true
          
          # Remove existing GenerateTweetsSchedule rule if it exists
          aws events remove-targets --rule "GenerateTweetsSchedule" --ids "1" || true
          aws events delete-rule --name "GenerateTweetsSchedule" || true
          
          # Remove existing PostTweetsSchedule rule if it exists
          aws events remove-targets --rule "PostTweetsSchedule" --ids "1" || true
          aws events delete-rule --name "PostTweetsSchedule" || true
          
          # Remove existing Lambda permissions
          aws lambda remove-permission \
            --function-name auto-tweet \
            --statement-id "AllowEventBridgeInvoke" || true
          aws lambda remove-permission \
            --function-name auto-tweet \
            --statement-id "AllowGenerateTweetsScheduleInvoke" || true
          aws lambda remove-permission \
            --function-name auto-tweet \
            --statement-id "AllowPostTweetsScheduleInvoke" || true
          
          echo "Setting up new rules..."
          
          # Create new rules
          # Create rules for tweet generation (9:30 AM IST) and tweet posting (every minute)
          aws events put-rule \
            --name "GenerateTweetsSchedule" \
            --schedule-expression "cron(30 4 * * ? *)" \
            --state ENABLED

          aws events put-rule \
            --name "PostTweetsSchedule" \
            --schedule-expression "rate(1 minute)" \
            --state ENABLED

          # Setup permissions for both rules
          for RULE in "GenerateTweetsSchedule" "PostTweetsSchedule"; do
            aws lambda remove-permission \
              --function-name auto-tweet \
              --statement-id "Allow${RULE}Invoke" || true
            
            sleep 2
            
            aws lambda add-permission \
              --function-name auto-tweet \
              --statement-id "Allow${RULE}Invoke" \
              --action 'lambda:InvokeFunction' \
              --principal events.amazonaws.com \
              --source-arn $(aws events describe-rule --name "$RULE" --query 'Arn' --output text)

            aws events put-targets \
              --rule "$RULE" \
              --targets "Id"="1","Arn"="$(aws lambda get-function --function-name auto-tweet --query 'Configuration.FunctionArn' --output text)"
          done
